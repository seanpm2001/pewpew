"use strict";(self.webpackChunkresults_viewer_react=self.webpackChunkresults_viewer_react||[]).push([[447],{256:(module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   v6: () => (/* reexport safe */ _hdr_histogram_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.v6)\n/* harmony export */ });\n/* harmony import */ var _hdr_histogram_wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(117);\n/* harmony import */ var _hdr_histogram_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(243);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_hdr_histogram_wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_1__]);\n_hdr_histogram_wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n(0,_hdr_histogram_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__/* .__wbg_set_wasm */ .oT)(_hdr_histogram_wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_1__);\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXFEO0FBQ087QUFDNUQsbUZBQWMsQ0FBQyx3REFBSTtBQUN3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3Jlc3VsdHMtdmlld2VyLXJlYWN0Ly4vbGliL2hkci1oaXN0b2dyYW0td2FzbS9oZHJfaGlzdG9ncmFtX3dhc20uanM/N2NlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB3YXNtIGZyb20gXCIuL2hkcl9oaXN0b2dyYW1fd2FzbV9iZy53YXNtXCI7XG5pbXBvcnQgeyBfX3diZ19zZXRfd2FzbSB9IGZyb20gXCIuL2hkcl9oaXN0b2dyYW1fd2FzbV9iZy5qc1wiO1xuX193Ymdfc2V0X3dhc20od2FzbSk7XG5leHBvcnQgKiBmcm9tIFwiLi9oZHJfaGlzdG9ncmFtX3dhc21fYmcuanNcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///256\n")},243:(module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Or: () => (/* binding */ __wbindgen_throw),\n/* harmony export */   aX: () => (/* binding */ __wbg_error_fe807da27c4a4ced),\n/* harmony export */   h4: () => (/* binding */ __wbindgen_string_new),\n/* harmony export */   oT: () => (/* binding */ __wbg_set_wasm),\n/* harmony export */   ug: () => (/* binding */ __wbindgen_object_drop_ref),\n/* harmony export */   v6: () => (/* binding */ HDRHistogram)\n/* harmony export */ });\n/* module decorator */ module = __webpack_require__.hmd(module);\nlet wasm;\nfunction __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n*/\nclass HDRHistogram {\n\n    static __wrap(ptr) {\n        const obj = Object.create(HDRHistogram.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_hdrhistogram_free(ptr);\n    }\n    /**\n    * @param {string} base64\n    * @param {string | undefined} log_level\n    */\n    constructor(base64, log_level) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(base64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(log_level) ? 0 : passStringToWasm0(log_level, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.hdrhistogram_from_base64(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return HDRHistogram.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    getMean() {\n        const ret = wasm.hdrhistogram_getMean(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    getStdDeviation() {\n        const ret = wasm.hdrhistogram_getStdDeviation(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {bigint}\n    */\n    getTotalCount() {\n        const ret = wasm.hdrhistogram_getTotalCount(this.ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * @param {number} percentile\n    * @returns {bigint}\n    */\n    getValueAtPercentile(percentile) {\n        const ret = wasm.hdrhistogram_getValueAtPercentile(this.ptr, percentile);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * @param {HDRHistogram} other\n    */\n    add(other) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, HDRHistogram);\n            wasm.hdrhistogram_add(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {bigint}\n    */\n    getMinNonZeroValue() {\n        const ret = wasm.hdrhistogram_getMinNonZeroValue(this.ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * @returns {bigint}\n    */\n    getMaxValue() {\n        const ret = wasm.hdrhistogram_getMaxValue(this.ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * @returns {HDRHistogram}\n    */\n    clone() {\n        const ret = wasm.hdrhistogram_clone(this.ptr);\n        return HDRHistogram.__wrap(ret);\n    }\n}\n\nfunction __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_error_fe807da27c4a4ced(arg0) {\n    console.error(getObject(arg0));\n};\n\nfunction __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nfunction __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///243\n")},447:(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataPoint: () => (/* binding */ DataPoint),\n/* harmony export */   processJson: () => (/* binding */ processJson),\n/* harmony export */   processNewJson: () => (/* binding */ processNewJson)\n/* harmony export */ });\n/* harmony import */ var _fs_hdr_histogram_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(256);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_fs_hdr_histogram_wasm__WEBPACK_IMPORTED_MODULE_0__]);\n_fs_hdr_histogram_wasm__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nfunction isObject(o) {\n    return typeof o === "object" && !!o;\n}\nfunction valueChecker(check, unknownCheck, key, value) {\n    if (typeof check === "string") {\n        const type = typeof value;\n        if (type !== check) {\n            return `expected property "${key}" to be a "${check}" but it was a "${type}"`;\n        }\n    }\n    else if (check !== undefined) {\n        if (!check(value)) {\n            return `property "${key}" did not pass check`;\n        }\n    }\n    else if (typeof unknownCheck === "string") {\n        const type = typeof value;\n        if (type !== unknownCheck) {\n            return `expected property "${key}" to be a "${unknownCheck}" but it was a "${type}"`;\n        }\n    }\n    else if (unknownCheck !== undefined) {\n        if (!unknownCheck(value)) {\n            return `property "${key}" did not pass check`;\n        }\n    }\n    return undefined;\n}\nfunction propertyChecker(o, requiredChecks, unknownCheck, optionalChecks) {\n    const requiredMap = new Map(requiredChecks);\n    const optionalMap = new Map(optionalChecks || []);\n    for (const [key, value] of Object.entries(o)) {\n        const check = requiredMap.get(key) || optionalMap.get(key);\n        requiredMap.delete(key);\n        const checkedResult = valueChecker(check, unknownCheck, key, value);\n        if (checkedResult) {\n            return checkedResult;\n        }\n    }\n    if (requiredMap.size > 0) {\n        const missingProperties = [...requiredMap.keys()]\n            .map((k) => `"${k}"`)\n            .join(", ");\n        return "missing properties: " + missingProperties;\n    }\n    return undefined;\n}\nfunction asBucketId(b) {\n    if (!isObject(b)) {\n        return new Error("bucket id is not an object");\n    }\n    const checks = [\n        ["method", "string"],\n        ["url", "string"]\n    ];\n    const result = propertyChecker(b, checks, "string");\n    if (result) {\n        return new Error("failed property check for bucket id. " + result);\n    }\n    else {\n        return b;\n    }\n}\nclass DataPoint {\n    time;\n    duration;\n    endTime;\n    requestTimeouts;\n    rttHistogram;\n    startTime;\n    statusCounts;\n    testErrors;\n    constructor(preProcessed) {\n        this.time = new Date(preProcessed.time * 1000);\n        this.duration = preProcessed.duration;\n        if (preProcessed.endTime !== 0) {\n            this.endTime = new Date(preProcessed.endTime * 1000);\n        }\n        this.requestTimeouts = preProcessed.requestTimeouts || 0;\n        this.rttHistogram = new _fs_hdr_histogram_wasm__WEBPACK_IMPORTED_MODULE_0__/* .HDRHistogram */ .v6(preProcessed.rttHistogram);\n        if (preProcessed.startTime !== 0) {\n            this.startTime = new Date(preProcessed.startTime * 1000);\n        }\n        this.statusCounts = preProcessed.statusCounts;\n        this.testErrors = preProcessed.testErrors;\n    }\n    mergeInto(other) {\n        this.requestTimeouts += other.requestTimeouts;\n        this.rttHistogram.add(other.rttHistogram);\n        for (const key of Object.keys(other.statusCounts)) {\n            this.statusCounts[key] = (this.statusCounts[key] || 0) + (other.statusCounts[key] || 0);\n        }\n        for (const key of Object.keys(other.testErrors)) {\n            this.testErrors[key] = (this.testErrors[key] || 0) + (other.testErrors[key] || 0);\n        }\n    }\n    clone() {\n        const props = {\n            rttHistogram: this.rttHistogram.clone(),\n            statusCounts: Object.assign({}, this.statusCounts),\n            testErrors: Object.assign({}, this.testErrors)\n        };\n        return Object.assign(Object.create(this), this, props);\n    }\n}\nfunction isStatusCounts(sc) {\n    if (!isObject(sc)) {\n        return false;\n    }\n    return Object.entries(sc).every(([k, v]) => Number.parseInt(k, 10) > 0 && typeof v === "number");\n}\nfunction isTestErrors(sc) {\n    if (!isObject(sc)) {\n        return false;\n    }\n    return Object.values(sc).every((v) => typeof v === "number");\n}\nfunction asDataPointPreProcessed(dp) {\n    if (!isObject(dp)) {\n        return new Error("data point is not an object");\n    }\n    const checks = [\n        ["duration", "number"],\n        ["endTime", "number"],\n        ["rttHistogram", "string"],\n        ["startTime", "number"],\n        ["statusCounts", isStatusCounts],\n        ["testErrors", isTestErrors],\n        ["time", "number"]\n    ];\n    const optionalChecks = [\n        ["requestTimeouts", "number"]\n    ];\n    const result = propertyChecker(dp, checks, undefined, optionalChecks);\n    if (result) {\n        return new Error("failed property check for data point. " + result);\n    }\n    else {\n        return dp;\n    }\n}\nfunction asBucketEntry(b) {\n    if (!Array.isArray(b)) {\n        return new Error(`expected bucket entry to be an array but got: ${JSON.stringify(b)}`);\n    }\n    if (b.length !== 2) {\n        return new Error(`expected bucket entry to be an array with 2 element but it had ${b.length}`);\n    }\n    {\n        const result = asBucketId(b[0]);\n        if (result instanceof Error) {\n            return result;\n        }\n    }\n    if (!Array.isArray(b[1])) {\n        return new Error(`expected second value in bucket entry array to be an array bug got: ${JSON.stringify(b[1])}`);\n    }\n    for (const dppp of b[1]) {\n        const result = asDataPointPreProcessed(dppp);\n        if (result instanceof Error) {\n            return result;\n        }\n    }\n    return b;\n}\nfunction asStatsFile(s) {\n    if (!isObject(s)) {\n        return new Error("stats is not an object");\n    }\n    const checks = [["buckets", Array.isArray]];\n    {\n        const result = propertyChecker(s, checks);\n        if (result) {\n            return new Error("failed property check for stats. " + result);\n        }\n    }\n    const buckets = s.buckets;\n    for (const b of buckets) {\n        const result = asBucketEntry(b);\n        if (result instanceof Error) {\n            return result;\n        }\n    }\n    return s;\n}\nfunction processJson(json) {\n    const result = asStatsFile(json);\n    if (result instanceof Error) {\n        throw result;\n    }\n    else {\n        const ret = [];\n        for (const [bucketId, dataPoints] of result.buckets) {\n            ret.push([bucketId, dataPoints.map((dp) => new DataPoint(dp))]);\n        }\n        return ret;\n    }\n}\nfunction isTags(tags) {\n    if (!isObject(tags)) {\n        return false;\n    }\n    const tags2 = tags;\n    return typeof tags2.index === "number"\n        && Object.entries(tags2.tags).every(([_k, v]) => typeof v === "string")\n        && tags2.tags["_id"] !== undefined\n        && tags2.tags["method"] !== undefined\n        && tags2.tags["url"] !== undefined;\n}\nfunction isTimeBucketEntry(tbe) {\n    if (!isObject(tbe)) {\n        return false;\n    }\n    const tbe2 = tbe;\n    const fails = (tbe2["rttHistogram"] !== undefined && typeof tbe2.rttHistogram !== "string")\n        || (tbe2["statusCounts"] !== undefined && !isStatusCounts(tbe2.statusCounts))\n        || (tbe2["requestTimeouts"] !== undefined && typeof tbe2.requestTimeouts !== "number")\n        || (tbe2["testErrors"] !== undefined && !isTestErrors(tbe2.testErrors));\n    return !fails;\n}\nfunction isEntries(entries) {\n    if (!isObject(entries)) {\n        return false;\n    }\n    return Object.entries(entries).every(([_k, v]) => isTimeBucketEntry(v));\n}\nfunction isHeader(header) {\n    if (!isObject(header)) {\n        return false;\n    }\n    const headerChecks = [\n        ["test", "string"],\n        ["bin", "string"],\n        ["bucketSize", "number"]\n    ];\n    return !propertyChecker(header, headerChecks);\n}\nfunction isBuckets(buckets) {\n    if (!isObject(buckets)) {\n        return false;\n    }\n    const bucketsChecks = [\n        ["time", "number"],\n        ["entries", isEntries]\n    ];\n    return !propertyChecker(buckets, bucketsChecks);\n}\nfunction checkNewJsonEntry(entry) {\n    return isHeader(entry)\n        || isTags(entry)\n        || isBuckets(entry);\n}\nfunction processNewJson(jsons) {\n    const tags = [];\n    const data = [];\n    let bucketSize = 0;\n    for (const json of jsons) {\n        if (!checkNewJsonEntry(json)) {\n            throw new Error("failed property checks for entry");\n        }\n        if ("test" in json) {\n            bucketSize = json.bucketSize;\n            continue;\n        }\n        else if ("tags" in json) {\n            tags[json.index] = json.tags;\n        }\n        else {\n            const time = json.time;\n            for (const [index, values] of Object.entries(json.entries)) {\n                const dppp = {\n                    time,\n                    duration: bucketSize,\n                    endTime: time + bucketSize,\n                    rttHistogram: values.rttHistogram || "HISTEwAAAAEAAAAAAAAAAwAAAAAAAAABAAAAAAAAAAI/8AAAAAAAAAA",\n                    startTime: time,\n                    statusCounts: values.statusCounts || {},\n                    testErrors: values.testErrors || {}\n                };\n                const index2 = parseInt(index, 10);\n                data[index2] = data[index2] || [];\n                data[index2].push(dppp);\n            }\n        }\n    }\n    const buckets = [];\n    for (const [index, tag] of tags.entries()) {\n        buckets[index] = [tag, data[index]];\n    }\n    const statsFile = { buckets };\n    return processJson(statsFile);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///447\n')},117:(Q,B,F)=>{var U=F(243);Q.exports=F.v(B,Q.id,"9a0982010cdf3772442f",{"./hdr_histogram_wasm_bg.js":{__wbindgen_string_new:U.h4,__wbg_error_fe807da27c4a4ced:U.aX,__wbindgen_object_drop_ref:U.ug,__wbindgen_throw:U.Or}})}}]);